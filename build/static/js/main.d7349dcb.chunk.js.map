{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7349dcb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl }) {\r\n  // add prop for large row/ isLargeRow\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className=\"row__poster\" // swap to make big {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${movie.poster_path}`}\r\n            /* ${isLargeRow ? movie.poster_path : movie.backdrop_path */\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"56c935a4fbc065d8f4110cf30820a621\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* title */}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* 2 buttons */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My list</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner__fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 1) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        /* to add large row / isLargeRow */\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action & Adventure\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanticMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}